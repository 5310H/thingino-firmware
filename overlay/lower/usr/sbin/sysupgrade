#!/bin/sh

KERNEL_MAGIC="27051956"
U_BOOT_MAGIC="06050403"
ROOTFS_MAGIC="68737173"

trap_signal_received=0  # flag to track if a signal was received

cleanup() {
	# Perform cleanup when a signal is received or an error occurs
	echo "Cleaning up temporary files..."
	# Delete all temporary files that start with 'tmp.' in the /tmp directory
	rm -f /tmp/tmp.*
	exit 0
}

# Trap INT and TERM signals to ensure cleanup when the script is interrupted or killed
trap 'trap_signal_received=1; cleanup' INT TERM

show_help() {
	echo "Usage: $0 <filename> | [-f | -p] | <URL>
Where:
-f          full upgrade with a binary from GitHub
-p          partial upgrade with a binary from GitHub
<filename>  full or partial upgrade from a local file
<URL>       full or partial upgrade from a URL
-h          this help"
}

download_file() {
	local url=$1
	local file_dest=$2

	if ! curl -# -L -f -o "$file_dest" "$url"; then
		echo -e "Failed to download: $url"
		cleanup  # Clean up if download fails...
	fi
}

verify_checksum() {
	local checksum_url=$1
	local binary_file=$2

	checksum_file=$(mktemp -p /tmp tmp.XXXXXX)
	echo "Downloading SHA-256 checksum from: $checksum_url"
	download_file "$checksum_url" "$checksum_file"

	expected_checksum=$(awk '{print $1}' "$checksum_file")
	actual_checksum=$(sha256sum "$binary_file" | awk '{print $1}')

	if [ "$expected_checksum" != "$actual_checksum" ]; then
		echo "SHA-256 checksum verification failed! Firmware might be corrupted."
		cleanup  # lets clean up if the checksum verification fails
	fi
}

confirm_full_upgrade() {
	echo "Warning: You are about to perform a full upgrade, which will replace the existing bootloader (U-Boot)."
	echo "This is a risky operation, and if something goes wrong, you may need to perform a recovery to restore the system."
	echo "Are you sure you want to proceed? (yes/no)"
	read -r confirmation
	if [ "$confirmation" != "yes" ]; then
		echo "Full upgrade canceled."
		exit 1
	fi
}

download_and_verify() {
	local fw_file="$1"
	local checksum_file="$2"
	local fw_url="$3"
	local checksum_url="$4"

	binary_file=$(mktemp -p /tmp tmp.XXXXXX)
	echo
	echo "Downloading firmware from: $fw_url"
	download_file "$fw_url" "$binary_file"
	verify_checksum "$checksum_url" "$binary_file"
}

prepare_flash() {
	echo "Stopping services..."
	stop_services

	echo "Removing snapshots"
	rm -f /tmp/snapshot.jpg
	flush_memory

	# Copy busybox to /tmp and make it executable
	if ! cp /bin/busybox /tmp/busybox; then
		echo "Error: Failed to copy busybox to /tmp"
		cleanup  # Clean up if busybox cannot be copied
	fi
	chmod +x /tmp/busybox

	# Copy stage2 script to /tmp and make it executable
	if ! cp /usr/sbin/stage2 /tmp/tmp.stage2; then
		echo "Error: Failed to copy stage2 to /tmp"
		cleanup  # Clean up if stage2 cannot be copied
	fi
	chmod +x /tmp/tmp.stage2

	# Use the copied busybox to run stage2
	echo "Prepare for sysupgrade stage 2..."
	if ! exec /tmp/busybox sh /tmp/tmp.stage2 "$binary_file" "$mtd_dev"; then
		echo "Error: Failed to execute sysupgrade stage 2 using busybox"
		cleanup  # Clean up if stage2 execution fails
	fi
}

stop_service() {
	if [ -f "/etc/init.d/$1" ]; then
		sh /etc/init.d/"$1" stop
	fi
}

stop_services() {
	services="S01syslogd S09motor S15thingino-button S49ntpd S50httpd S50crond S50mdnsd S50mosquitto S93telegrambot S95prudynt S96iad S96onvif_discovery S97onvif_notify"
	for service in $services; do
		stop_service "$service"
	done
}

flush_memory() {
	echo "Sync changes"
	sync
	echo "Drop caches"
	echo 3 > /proc/sys/vm/drop_caches
}

# main logic
force_upgrade=0
upgrade=""

while getopts "fhpy" flag; do
	case "$flag" in
		f)
			upgrade="full"
			;;
		p)
			upgrade="part"
			;;
		y)
			if [ "$upgrade" = "full" ]; then
				force_upgrade=1
			else
				echo "Error: -y can only be used with -f (full upgrade)"
				exit 1
			fi
			;;
		h|*)
			show_help
			exit 1
			;;
	esac
done

if [ "$upgrade" = "full" ]; then
	confirm_full_upgrade
fi

if [ -z "$upgrade" ]; then
	if [ -z "$1" ]; then
		show_help
		exit 1
	fi
	upgrade="local"
fi

shift $((OPTIND-1))

if [ "$upgrade" = "local" ]; then
	echo "Upgrading from a provided file"
	if echo "$1" | grep -qE '^https?://'; then
		binary_file=$(mktemp -p /tmp tmp.XXXXXX)
		echo "Downloading firmware from: $1"
		download_file "$1" "$binary_file"
	else
		binary_file="$1"
	fi
else
	echo "Upgrading from GitHub"
	data=/etc/os-release
	profile=$(awk -F '=' '/^IMAGE_ID=/ {print $2}' $data)
	if [ -z "$profile" ]; then
		echo "Building profile is not set in $data"
		exit 1
	fi

	fw_url="https://github.com/themactep/thingino-firmware/releases/download/firmware"
	checksum_url="https://github.com/themactep/thingino-firmware/releases/download/verify"

	if [ "$upgrade" = "part" ]; then
		fw_file="_update/thingino-${profile}-update.bin"
		sha256_file="thingino-${profile}-update.bin.sha256sum"
	else
		fw_file="/thingino-${profile}.bin"
		sha256_file="thingino-${profile}.bin.sha256sum"
	fi

	download_and_verify "$fw_file" "$sha256_file" "${fw_url}${fw_file}" "${checksum_url}/${sha256_file}"
fi

internal_magic=$(xxd -l 4 -p "$binary_file")

case "$internal_magic" in
	"$U_BOOT_MAGIC")
		fsize=$(stat -c%s "$binary_file")
		if [ "$fsize" -le $((256 * 1024)) ]; then
			mtd_dev="mtd0"
		else
			mtd_dev="mtd6"
		fi
		;;
	"$KERNEL_MAGIC")
		mtd_dev="mtd5"
		;;
	"$ROOTFS_MAGIC")
		echo "We cannot flash only rootfs"
		exit 1
		;;
	*)
		echo "Unknown file"
		exit 1
		;;
esac

prepare_flash

# If we complete successfully, do not clean up
trap - INT TERM

exit 0

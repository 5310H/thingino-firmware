#!/bin/sh

plugin="telegrambot"

command -v jsonfilter > /dev/null || die "$plugin is not supported on this platform, missing jsonfilter."

. /sbin/common-plugins
singleton

[ "true" = "$telegrambot_enabled" ] || die "Telegram Bot is not enabled in $CONFIG_FILE."

data_file="/tmp/$plugin.json"
offset_file="/tmp/$plugin.offset"
offset_file_backup="/etc/webui/$plugin.offset"

IFS_ORIG=$IFS
API_URL="https://api.telegram.org/bot$telegrambot_token"

### Common methods

build_menu() {
	local i
	local description
	local script
	for i in $(seq 0 9); do
		local command=$(eval echo \$telegrambot_command_$i)
		if [ -n "$command" ]; then
			description=$(eval echo \$telegrambot_description_$i)
			script=$(eval echo \$telegrambot_script_$i)
			bot_commands="$bot_commands{\"command\":\"$command\",\"description\":\"$description\"},"
			bot_keyboard="$bot_keyboard\"/$command\","
			bot_inline_keyboard="$bot_inline_keyboard{\"text\":\"$command\",\"callback_data\":\"$script\"},"
			description=""
			script=""
		fi
	done
}

dump_data() {
	log "DATA: $(cat $data_file)"
}

save_offset() {
	[ -f "$offset_file" ] || return
	cp "$offset_file" "$offset_file_backup"
	sync
	sleep 1
}

restore_offset() {
	[ -f "$offset_file_backup" ] || return
	cp "$offset_file_backup" "$offset_file"
}

#### Telegram API

api_call() {
	log "$1"
	command="$CURL --url \"$API_URL/$1\" --header \"Content-Type: application/json\" --data '$2' $3"
	log_and_run "$command"
}

### Bot actions

get_me() {
	api_call "getMe" "{\"timeout\":5}" "--output $data_file"
	ME="@$(jsonfilter -i $data_file -e "$.result.username")"
	log "Starting Telegram Bot $ME"
}

# leave_chat "chat_id"
leave_chat() {
	api_call "leaveChat" "{\"chat_id\":\"$1\"}"
}

### Commands menu

get_my_commands() {
	api_call "getMyCommands"
}

delete_my_commands() {
	api_call "deleteMyCommands"
}

set_my_commands() {
	api_call "setMyCommands" "{\"commands\":$bot_commands}"
}

set_chat_menu_button() {
	api_call "setChatMenuButton" "{\"menu_button\":'{\"type\":\"commands\"}'}"
}

# show_menu "chat_id"
show_menu() {
	local data="{\"chat_id\":\"$1\",\"text\":\"Here you go\""
	#	[ -n "$2" ] && data="${data},\"reply_to_message_id\":\"$2\""
	case "$chat_type" in
		"private")
			#data="${data},\"reply_markup\":$bot_keyboard"
			data="${data},\"reply_markup\":$bot_inline_keyboard"
			;;
		"channel")
			#data="${data},\"reply_markup\":$bot_keyboard"
			data="${data},\"reply_markup\":$bot_inline_keyboard"
			;;
		"group")
			#data="${data},\"reply_markup\":$bot_keyboard"
			data="${data},\"reply_markup\":$bot_inline_keyboard"
			;;
		"supergroup")
			#data="${data},\"reply_markup\":$bot_keyboard"
			data="${data},\"reply_markup\":$bot_inline_keyboard"
			;;
	esac
	data="$data}"
	api_call "sendMessage" "$data"
}

### Updates

get_updates() {
	local offset=0
	[ -f "$offset_file" ] && offset=$(cat $offset_file)

	# Available types of update:
	# - message
	# - edited_message
	# - channel_post
	# - edited_channel_post
	# - inline_query
	# - chosen_inline_result
	# - callback_query
	# - shipping_query
	# - pre_checkout_query
	# - poll
	# - poll_answer
	# - my_chat_member
	# - chat_member
	# - chat_join_request

	local data="{\"offset\":\"$offset\",\"timeout\":5,\"allowed_updates\":[\"message\",\"channel_post\"]}"
	api_call "getUpdates" "$data" "--output $data_file"
}

# send_message "chat_id" "message text" "reply_to_message"
send_message() {
	local data="{\"chat_id\":\"$1\",\"text\":\"$2\""
	[ -n "$3" ] && data="$data,\"reply_to_message_id\":\"$3\""
	data="$data}"
	api_call "sendMessage" "$data"
}

# delete_message "chat_id" "message_id"
delete_message() {
	local data="{\"chat_id\":\"$1\",\"message_id\":\"$2\"}"
	api_call "deleteMessage" "$data"
}

tgb_readfromapi() {
	local command="jsonfilter -s \"$updates\" -e \"$.result[@.update_id=$update_id].message.chat.id\""
	log_and_run "$command"
}

### Logics

bot_commands="["
bot_keyboard="{\"keyboard\":[["
bot_inline_keyboard="{\"inline_keyboard\":[["
build_menu
bot_commands="$bot_commands{\"command\":\"help\",\"description\":\"Help\"}]"
bot_keyboard="$bot_keyboard\"/help\"]],\"one_time_keyboard\":true,\"resize_keyboard\":true}"
bot_inline_keyboard="$bot_inline_keyboard{\"text\":\"help\",\"callback_data\":\"help.sh\"}]],\"one_time_keyboard\":true,\"resize_keyboard\":true}"

restore_offset

get_me
delete_my_commands
set_my_commands
get_my_commands
set_chat_menu_button

while :; do
	get_updates
	dump_data

	status=$(jsonfilter -i $data_file -e "$.ok")
	if [ "true" = "$status" ]; then
		update_ids=$(jsonfilter -i $data_file -e "$.result[*].update_id")
		[ -z "$update_ids" ] && continue

		log "Found new messages: $update_ids"
		for update_id in $update_ids; do
			log "Processing message $update_id"

			next_id=$((update_id + 1))
			log "Saving pointer $next_id to $offset_file"
			echo $next_id > $offset_file

			if [ -z "$(jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.entities")" ]; then
				log "Message $update_id has no entities"
				continue
			fi

			jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.entities[*]" > /tmp/entities.json
			log "Message $update_id has entities: $(cat /tmp/entities.json)"

			IFS=$'\n'
			entities=$(cat /tmp/entities.json)
			for entity in $entities; do
				chat_id=$(jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.chat.id")
				chat_type=$(jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.chat.type")
				message_id=$(jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.message_id")
				message_text=$(jsonfilter -i $data_file -e "$.result[@.update_id=$update_id].*.text")

				# Available entity types:
				# - mention (@username)
				# - hashtag (#hashtag)
				# - cashtag ($USD)
				# - bot_command (/start@jobs_bot)
				# - url (https://telegram.org)
				# - email (do-not-reply@telegram.org)
				# - phone_number (+1-212-555-0123)
				# - bold (bold text)
				# - italic (italic text)
				# - underline (underlined text)
				# - strikethrough (strikethrough text)
				# - spoiler (spoiler message)
				# - code (monowidth string)
				# - pre (monowidth block)
				# - text_link (for clickable text URLs)
				# - text_mention‚Äù (for users without usernames)
				# - custom_emoji (for inline custom emoji stickers)

				message_type=$(jsonfilter -s "$entity" -e "$.type")
				if [ "bot_command" = "$message_type" ]; then
					_o=$(jsonfilter -s "$entity" -e "$.offset")
					_l=$(jsonfilter -s "$entity" -e "$.length")
					bot_command="${message_text:$_o:$_l}"
					log "BOT COMMAND: $bot_command"
					unset _l
					unset _o

					# split command by '@' to $command and $mention
					mention=${bot_command##*@}
					if [ "$bot_command" = "$mention" ]; then
						log "Command $bot_command is global"
						unset mention
					else
						bot_command=${bot_command%%@*}
						if [ -n "$mention" ] && [ "$ME" != "@$mention" ]; then
							log "Command $bot_command is not for $ME but for $mention"
							unset mention
							unset bot_command
						fi
					fi
				fi
			done
			IFS=$IFS_ORIG

			if [ -n "$bot_command" ]; then
				[ "reboot" = "$bot_command" ] && save_offset

				casecmd="case \"\$bot_command\" in "
				for i in $(seq 0 9); do
					[ -n "$telegrambot_command_$i" ] || continue
					casecmd="$casecmd\"/\$telegrambot_command_$i\") script='\$telegrambot_script_$i' ;;"
				done
				casecmd="${casecmd}*) message=\"Command \$bot_command not found.\" ;; esac;"
				eval $casecmd

				if [ -n "$script" ]; then
					log "SCRIPT: $script"
					message=$(eval $script)
				fi
				# sanitize doublequotes
				message=${message//\"/\\\"}
				# reply only if script produced an output
				[ -n "$message" ] && send_message "$chat_id" "$message" "$message_id"
			fi

			# clean up
			unset bot_command
			unset chat_id
			unset chat_type
			unset mention
			unset message_id
			unset message_text
			unset message_type
			unset url
			unset message
			unset script
			unset casecmd
		done
	fi

	sleep 1
done

quit_clean 0
